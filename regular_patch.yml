---
# file: site-maintenance.yml
- name: Regular Infra Health Check
  hosts: all
  gather_facts: true
  become: true

  vars:
    # === 임계치 & 점검 대상 변수 ===
    ssl_targets:            # SSL 만료 확인 대상 (FQDN:PORT)
      - { host: "example.com", port: 443 }
    ssl_warn_days: 30       # SSL 만료 경고 임계(일)

    disk_warn_pct: 80       # 디스크 사용률 경고 임계(%)
    inode_warn_pct: 80      # inode 사용률 경고 임계(%)

    mem_warn_pct: 90        # Mem 사용률(%)
    swap_warn_pct: 20       # Swap 사용률(%)

    load_warn_per_core: 1.0 # 1분 LoadAvg 임계(코어당)

    must_services:          # 핵심 서비스 상태 확인
      - sshd
      # - nginx
      # - mariadb

    must_ports:             # 필수 리슨 포트 확인
      - 22
      # - 80
      # - 443

    log_grep_patterns: '(error|failed|segfault|panic)'
    log_tail_lines: 500

  pre_tasks:
    - name: Init alert bucket
      ansible.builtin.set_fact:
        alerts: []

    - name: Derive core count
      ansible.builtin.set_fact:
        cpu_cores: "{{ (ansible_facts.processor_vcpus | default(ansible_facts.processor_cores*ansible_facts.processor_count, true)) | int }}"

  tasks:
    # 1) OS 보안 업데이트 적용 여부
    - name: Check security updates (RHEL family)
      ansible.builtin.command: dnf updateinfo list security
      register: rhel_sec
      changed_when: false
      failed_when: false
      when: ansible_facts.os_family == "RedHat"

    - name: Flag security updates (RHEL)
      ansible.builtin.set_fact:
        alerts: "{{ alerts + ['[SECURITY] RHEL security advisories available (' ~ (rhel_sec.stdout_lines|length) ~ ' lines). Review & patch.'] }}"
      when:
        - ansible_facts.os_family == "RedHat"
        - rhel_sec.stdout is defined
        - rhel_sec.stdout | length > 0

    - name: Check upgrades (Debian family - simulation)
      ansible.builtin.command: apt-get -s upgrade
      register: deb_up
      changed_when: false
      failed_when: false
      when: ansible_facts.os_family == "Debian"

#    - name: Flag upgrades (Debian)   # 업그레이드가 가능하다면 경고창 띄우는건데 @@@@@@뺴도 될것같음@@@@@@@
#      ansible.builtin.set_fact: 
#        alerts: "{{ alerts + ['[SECURITY] Debian upgrades available. Review & patch.'] }}"
#      when:
#        - ansible_facts.os_family == "Debian"
#        - deb_up.stdout is search('upgraded,')  # apt 시뮬 결과에 요약 포함

    # (선택) 재부팅 필요 여부     
    # ssh, 커널등 업데이트 후 적용을 위해 서버 재시작이 필요한 경우 /var/run 경로에 파일이 생긴다고함 생겨도 재시작하면 다시 자동으로 사라지기 때문에 굳이 넣을 필요는 없는 것 같음
    #- name: Ubuntu reboot-required
    #  ansible.builtin.stat:
    #    path: /var/run/reboot-required
    #  register: reboot_req
    #  when: ansible_facts.distribution == "Ubuntu"

    #- name: Flag reboot-required
    #  ansible.builtin.set_fact:
    #    alerts: "{{ alerts + ['[KERNEL] Reboot required after updates.'] }}"
    #  when: reboot_req.stat.exists | default(false)

    # 2) SSL 인증서 만료일
    - name: Collect SSL notAfter 
      ansible.builtin.shell: | 
        set -o pipefail   # 밑에가 파이프라인으로 한번에 여러 명령을 실행하는 구간인데 이때 원래 파이프 라인은 중간 명령이 실패 했든 성공했든 마지막 명령을 기준으로 성공 실패 기준값을 
        #반환한다. 때문에 중간에 실패한 명령어가 있어도 알 수가 없기 때문에 set -o pipefail 명령을 사용하면 중간에 명령이 실패하면 그 실패한 명령에 대해 반환 하기 때문에 해결된다.
        timeout 5 openssl s_client -servername {{ item.host }} -connect {{ item.host }}:{{ item.port }} < /dev/null 2>/dev/null \
          | openssl x509 -noout -enddate | cut -d= -f2
      args: { executable: /bin/bash }
      loop: "{{ ssl_targets }}"
      register: ssl_dates
      changed_when: false
      failed_when: false

    - name: Evaluate SSL expiries
      ansible.builtin.set_fact:
        alerts: "{{ alerts + [ '[SSL] ' ~ item.item.host ~ ':' ~ item.item.port ~ ' expires in ' ~ (( (item.stdout | to_datetime('%b %d %H:%M:%S %Y %Z')) | community.general.to_timestamp ) - (ansible_date_time.epoch | int) ) // 86400 ~ ' days' ] }}"
      loop: "{{ ssl_dates.results | selectattr('stdout','defined') | list }}"
      when:
        - item.stdout | length > 0
        - (((item.stdout | to_datetime('%b %d %H:%M:%S %Y %Z')) | community.general.to_timestamp ) - (ansible_date_time.epoch | int)) // 86400 <= ssl_warn_days

    # 3) 디스크 사용률 / inode 사용률
    - name: Disk usage check via ansible_mounts
      ansible.builtin.set_fact:
        alerts: "{{ alerts + [ '[DISK] ' ~ m.mount ~ ' at ' ~ ((100 - (100.0*m.size_available/m.size_total)) | round(1) ) ~ '% used' ] }}"
      loop: "{{ ansible_facts.mounts | default(ansible_facts.ansible_mounts, true) }}"
      loop_control: { loop_var: m }
      when:
        - m.fstype is defined
        - m.fstype not in ['tmpfs','devtmpfs','squashfs']
        - (100 - (100.0*m.size_available/m.size_total)) | float >= disk_warn_pct

    - name: Inode usage check
      ansible.builtin.shell: "df -Pi | awk 'NR>1{print $6, $5}'"
      register: inode_df
      changed_when: false

    - name: Flag high inode usage
      ansible.builtin.set_fact:
        alerts: "{{ alerts + [ '[INODE] ' ~ item.split()[0] ~ ' at ' ~ item.split()[1] ] }}"
      loop: "{{ inode_df.stdout_lines | default([]) }}"
      when: "(item.split()[1] | regex_replace('%','') | int) >= inode_warn_pct"

    # 4) 메모리/Swap 사용률
    - name: Memory/Swap usage compute
      ansible.builtin.set_fact:
        mem_used_pct: "{{ 100 - (100.0 * ansible_facts.memfree_mb / ansible_facts.memtotal_mb) }}"
        swap_used_pct: >-
          {{ (ansible_facts.swaptotal_mb | int) == 0
             | ternary(0, 100 - (100.0 * ansible_facts.swapfree_mb / ansible_facts.swaptotal_mb)) }}

    - name: Flag memory high
      ansible.builtin.set_fact:
        alerts: "{{ alerts + [ '[MEM] Usage ' ~ (mem_used_pct | round(1)) ~ '%'] }}"
      when: mem_used_pct | float >= mem_warn_pct

    - name: Flag swap high
      ansible.builtin.set_fact:
        alerts: "{{ alerts + [ '[SWAP] Usage ' ~ (swap_used_pct | round(1)) ~ '%'] }}"
      when: swap_used_pct | float >= swap_warn_pct

    # 5) CPU Load Average (코어 대비)
    - name: Read 1min loadavg
      ansible.builtin.shell: "cut -d' ' -f1 /proc/loadavg"
      register: la
      changed_when: false

    - name: Flag high load
      ansible.builtin.set_fact:
        alerts: "{{ alerts + [ '[LOAD] 1m ' ~ (la.stdout | float) ~ ' (> ' ~ (cpu_cores*load_warn_per_core) ~ ')' ] }}"
      when: (la.stdout | float) > (cpu_cores * load_warn_per_core)

    # 6) 핵심 서비스 상태
    - name: Check essential services
      ansible.builtin.shell: "systemctl is-active {{ item }}"
      register: svc
      changed_when: false
      failed_when: false
      loop: "{{ must_services }}"

    - name: Flag inactive services
      ansible.builtin.set_fact:
        alerts: "{{ alerts + [ '[SERVICE] ' ~ item.item ~ ' is ' ~ item.stdout ] }}"
      loop: "{{ svc.results }}"
      when: item.rc != 0

    # 7) 필수 포트 리슨 상태
    - name: Check required listening ports
      ansible.builtin.wait_for:
        port: "{{ item }}"
        state: started
        timeout: 1
      register: portchk
      failed_when: false
      loop: "{{ must_ports }}"

    - name: Flag closed ports
      ansible.builtin.set_fact:
        alerts: "{{ alerts + [ '[PORT] ' ~ item.item ~ ' not listening' ] }}"
      loop: "{{ portchk.results }}"
      when: not item.state | default('started') == 'started' or item.failed | default(false)

    # 8) 최근 로그 에러 스캔 (/var/log/messages, dmesg or journal)
    - name: Tail messages (if exists)
      ansible.builtin.shell: "test -f /var/log/messages && tail -n {{ log_tail_lines }} /var/log/messages | egrep -i '{{ log_grep_patterns }}' || true"
      register: msglog
      changed_when: false

    - name: Scan dmesg recent errors
      ansible.builtin.shell: "dmesg --ctime | tail -n {{ log_tail_lines }} | egrep -i '{{ log_grep_patterns }}' || true"
      register: dmesglog
      changed_when: false

    - name: Scan journalctl sshd errors (if systemd)
      ansible.builtin.shell: "command -v journalctl >/dev/null 2>&1 && journalctl -u sshd -n {{ log_tail_lines }} | egrep -i '{{ log_grep_patterns }}' || true"
      register: journ
      changed_when: false

    - name: Flag log errors (condensed)
      ansible.builtin.set_fact:
        alerts: "{{ alerts + ['[LOG] Recent errors found in system logs'] }}"
      when: >
        (msglog.stdout | default('')) | length > 0
        or (dmesglog.stdout | default('')) | length > 0
        or (journ.stdout | default('')) | length > 0

  post_tasks:
    - name: Summary
      ansible.builtin.debug:
        msg:
          - "=== Health Check Summary on {{ inventory_hostname }} ==="
          - "OK (no alerts)" 
          - "{{ alerts }}"
      when: alerts | length > 0

    - name: No alerts message
      ansible.builtin.debug:
        msg: "=== {{ inventory_hostname }}: All checks passed. ==="
      when: alerts | length == 0
